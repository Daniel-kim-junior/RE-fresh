<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="refresh.ManageSystem.repository.MemberRepository">

    <select id="login" resultType="string" parameterType="MemberDAO">
      select member_id from member where member_id = #{memberId} and member_password = #{memberPassword}
    </select>
    <insert id="createMember" parameterType="MemberServiceDTO">
        insert into member(member_uid, department_uid, member_id, member_password,
                           member_name, member_cellphone, member_email,
                           annual_count, member_auth, member_status,
                           create_id, create_tm, update_id, update_tm)
        values (UUID(), (select department_uid from department where department_name = #{departmentName}),
                #{memberId}, SHA2(#{memberPassword}, 256), #{memberName}, #{memberCellphone}, #{memberEmail},
                12.0, #{memberAuth}, 'in use', #{createId}, NOW(), #{updateId}, NOW())
    </insert>
    <select id="checkId" resultType="boolean" parameterType="String">
        select count(member_id) from member where member_id = #{memberId}
    </select>
    <select id="getAuthority" resultType="string" parameterType="MemberDAO">
    select member_auth from member where member_id = #{memberId} and member_password = #{memberPassword}
    </select>
    <select id="getMemberName" resultType="string" parameterType="MemberDAO">
    select member_name from member where member_id = #{memberId} and member_password = #{memberPassword}
    </select>
    <select id="getMemberList" resultType="MemberVO">
      select member.member_id, member.member_name, department.department_id, department.department_name,
             member.member_cellphone, member.member_email, member.create_tm, member.retire_date, member.member_status
      from member left join department on member.department_uid = department.department_uid
    </select>
    <select id="getMemberListByPage" resultType="MemberVO" parameterType="PageDTO">
        select member.member_id, member.member_name, department.department_id, department.department_name,
               member.member_cellphone, member.member_email, member.create_tm, member.retire_date, member.member_status
        from member left join department on member.department_uid = department.department_uid
        limit #{start}, #{perPageNum}
    </select>
    <select id="getMemberSearchList" resultType="MemberVO" parameterType="MemberSearchDTO">
        select member.member_id, member.member_name, department.department_id, department.department_name,
        member.member_cellphone, member.member_email, member.create_tm, member.retire_date, member.member_status
        from member left join department on member.department_uid = department.department_uid
        <where>
            <if test="departmentName != null and departmentName  !=''">
                and department_name = #{departmentName}
            </if>
            <if test="memberName != null and memberName  !=''">
                and member_name like '%${memberName}%'
            </if>
            <if test="memberStatus != null and memberStatus !=''">
                and member_status = #{memberStatus}
            </if>
        </where>
        limit #{pageDTO.start}, #{pageDTO.perPageNum}
    </select>
    <select id="countMemberSearchList" resultType="int" parameterType="MemberSearchDTO">
      select count(*)
      from member left join department on member.department_uid = department.department_uid
    <where>
        <if test="departmentName != null and departmentName  !=''">
            and department_name = #{departmentName}
        </if>
        <if test="memberName != null and memberName  !=''">
            and member_name like '%${memberName}%'
        </if>
        <if test="memberStatus != null and memberStatus !=''">
            and member_status = #{memberStatus}
        </if>
    </where>
    </select>
    <select id="getMemberInfo" resultType="MemberInfoVO" parameterType="String">
        select department.department_name, member.annual_count, count(annual.annual_type) annualRequest from member
        left join department on member.department_uid = department.department_uid
        left join annual on member.member_uid = annual.member_uid
        where member.member_id = #{memberId}
    </select>
</mapper>